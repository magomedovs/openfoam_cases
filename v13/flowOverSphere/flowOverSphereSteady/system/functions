/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      functions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

minmaxdomain_scalar
{
    type            volFieldValue;
    libs            ( "libfieldFunctionObjects.so" );

    enabled 	    true; 	//true or false
    log             true;	//write to screen

    writeControl    writeTime;
    // writeControl    timeStep;
    // writeInterval   1;

    writeFields     false;	//write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;	//write location in the output file

    cellZone          all;
    mode            none;
    operation       none;

    fields
    (
        p
    );
}

minmaxdomain_vector
{
    type            volFieldValue;
    libs            ( "libfieldFunctionObjects.so" );

    enabled 	    true; 	//true or false
    log             true;	//write to screen
    
    writeControl    writeTime;
    // writeControl    timeStep;
    // writeInterval   1;

    writeFields     false;	//write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;	//write location in the output file

    cellZone          all;
    mode            none;
    operation       none;

    fields
    (
        U
    );
}

mindomain_scalar
{
    $minmaxdomain_scalar
    operation       min;
}

mindomain_vector
{
    $minmaxdomain_vector
    mode        magnitude;
    operation       minMag;
}

maxdomain_scalar
{
    $minmaxdomain_scalar
    operation       max;
}

maxdomain_vector
{
    $minmaxdomain_vector
    mode        magnitude;
    operation       maxMag;
}

vorticityField
{
    type            vorticity;
    libs            ( "libfieldFunctionObjects.so" );

    enabled 	    true; 	//true or false
    log             true;	//write to screen

    writeControl    writeTime;
    // writeControl    timeStep;
    // writeInterval   1;
    
    fields
    (
        U
    );
}

sphereForce
{
    type            forces;
    libs            ("libforces.so");
    
    enabled 	    true; 	//true or false
    log             true;	//write to screen

    writeControl    writeTime;

    patches     (sphere); // Names of patches on which to calculate forces
    rhoInf      1.;       // Far field density; e.g., 1.225 kg/m^3 for air
    CofR        (0 0 0);         // Centre of rotation; e.g., (0 0 0)
    // pitchAxis   <pitchAxis>;    // Pitch axis; e.g., (0 1 0)

    rho             rhoInf;
}

// fieldAverage1
// {
//     type                fieldAverage;
//     libs                ("libfieldFunctionObjects.so");

//     writeControl        writeTime;

//     restartOnRestart    false;
//     restartOnOutput     false;
//     periodicRestart     false;
//     // restartPeriod       80.;

//     base                time;
//     // window              250.0;
//     // windowName          w1;

//     mean                yes;
//     prime2Mean          yes;

//     fields              (U p);
// }

// ************************************************************************* //
